# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T08:10:34+00:00



import argparse
import json
import os
from typing import *
from typing import Optional, Union

from autogen.mcp.mcp_proxy import MCPProxy
from autogen.mcp.mcp_proxy.security import BaseSecurity
from fastapi import Path, Query

from models import (
    ArrayOfCountry,
    ArrayOfCountrySummary,
    Error,
    ErrorLimit,
    Order,
    Sort,
)

app = MCPProxy(
    title='',
    version='1.0.0',
    servers=[{'url': '//api.ote-godaddy.com'}],
)


@app.get(
    '/v1/countries',
    description=""" Authorization is not required """,
    tags=['country_data_retrieval'],
)
def get_countries(
    market_id: str = Query(..., alias='marketId'),
    region_type_id: Optional[int] = Query(None, alias='regionTypeId'),
    region_name: Optional[str] = Query(None, alias='regionName'),
    sort: Optional[Sort] = 'key',
    order: Optional[Order] = 'ascending',
):
    """
    Retrieves summary country information for the provided marketId and filters
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v1/countries/{countryKey}',
    description=""" Authorization is not required """,
    tags=['country_data_retrieval'],
)
def get_country(
    country_key: str = Path(..., alias='countryKey'),
    market_id: str = Query(..., alias='marketId'),
    sort: Optional[Sort] = 'key',
    order: Optional[Order] = 'ascending',
):
    """
    Retrieves country and summary state information for provided countryKey
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="MCP Server")
    parser.add_argument(
        "transport",
        choices=["stdio", "sse", "streamable-http"],
        help="Transport mode (stdio, sse or streamable-http)",
    )
    args = parser.parse_args()

    if "CONFIG_PATH" in os.environ:
        config_path = os.environ["CONFIG_PATH"]
        app.load_configuration(config_path)

    if "CONFIG" in os.environ:
        config = os.environ["CONFIG"]
        app.load_configuration_from_string(config)

    if "SECURITY" in os.environ:
        security_params = BaseSecurity.parse_security_parameters_from_env(
            os.environ,
        )

        app.set_security_params(security_params)

    mcp_settings = json.loads(os.environ.get("MCP_SETTINGS", "{}"))

    app.get_mcp(**mcp_settings).run(transport=args.transport)
